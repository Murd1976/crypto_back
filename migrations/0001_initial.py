# Generated by Django 4.1 on 2022-08-09 19:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdvUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_activated', models.BooleanField(db_index=True, default=True, verbose_name='Has been activated ?')),
                ('send_messages', models.BooleanField(default=True, verbose_name='Send update messages ?')),
                ('paid_account', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AllBackTests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strategy_name', models.CharField(max_length=50, verbose_name='Strategy.')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Test data.')),
                ('parts', models.IntegerField(verbose_name='Pairs part')),
                ('minimal_roi1_time', models.IntegerField()),
                ('minimal_roi1_value', models.DecimalField(decimal_places=1, max_digits=2)),
                ('minimal_roi2_time', models.IntegerField()),
                ('minimal_roi2_value', models.DecimalField(decimal_places=1, max_digits=2)),
                ('minimal_roi3_time', models.IntegerField()),
                ('minimal_roi3_value', models.DecimalField(decimal_places=1, max_digits=2)),
                ('minimal_roi4_time', models.IntegerField()),
                ('minimal_roi4_value', models.DecimalField(decimal_places=1, max_digits=2)),
                ('arg_N', models.IntegerField(verbose_name='Series length (N)')),
                ('arg_R', models.IntegerField(verbose_name='Persen of same candles (R)')),
                ('arg_P', models.IntegerField(verbose_name='Price incriase in N candles (P)')),
                ('arg_MR', models.DecimalField(decimal_places=1, max_digits=2, verbose_name='Movement ROI (MR)')),
                ('stoploss', models.DecimalField(decimal_places=1, max_digits=2, verbose_name='Stop-loss (after 0 min)')),
                ('my_stoploss_time', models.IntegerField(verbose_name='My Stop-loss (after [n] min)')),
                ('my_stoploss_value', models.DecimalField(decimal_places=1, max_digits=2, verbose_name='My Stop-loss (after [n] min)')),
                ('arg_stoploss', models.DecimalField(decimal_places=1, max_digits=2, verbose_name='Dsired Stop-loss value (S)')),
                ('text_log', models.TextField(verbose_name='Loggin text')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Test owner.')),
            ],
            options={
                'verbose_name': 'BackTest settings',
                'verbose_name_plural': 'BackTest settings',
                'ordering': ['-created_at'],
            },
        ),
    ]
